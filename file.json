{
    "cells": [
     {
      "cell_type": "code",
      "execution_count": 20,
      "id": "a0351d09",
      "metadata": {},
      "outputs": [],
      "source": [
       "import cv2 \n",
       "\n",
       "import numpy as np"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": 57,
      "id": "618ae8de",
      "metadata": {},
      "outputs": [],
      "source": [
       "def draw(conts):\n",
       "    \n",
       "    conts = sorted(conts, key=cv2.contourArea, reverse=True )\n",
       "    print(conts)\n",
       "    color = [ 255 // len(conts) * i for i in range(len(conts)) ] \n",
       "    for ind, cont in enumerate(conts):\n",
       "        if ind % 2 == 0: \n",
       "            fill = 1\n",
       "        else:\n",
       "            fill = 5\n",
       "        cv2.drawContours(frame, [cont], -1, (color[-ind] ,color[ind],200), fill)"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "id": "d4e1671d",
      "metadata": {},
      "outputs": [
       {
        "name": "stdout",
        "output_type": "stream",
        "text": ""
       }
       
      ],
      "source": [
       "cap = cv2.VideoCapture(0)\n",
       "\n",
       "while True:\n",
       "    tr, frame = cap.read()\n",
       "    frame_blur = cv2.blur(frame, (10, 10) )\n",
       "    frame_hsv = cv2.cvtColor(frame_blur, cv2.COLOR_BGR2HSV)\n",
       "    #     H    S   V\n",
       "    low = (0, 150, 120)\n",
       "    high = (15, 255, 255)\n",
       "    \n",
       "    mask = cv2.inRange( frame_hsv, low, high )\n",
       "    \n",
       "    conts, h = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE )\n",
       "    \n",
       "    draw(conts)\n",
       "    #frame[mask> 0] = (200,255,100)\n",
       "    \n",
       "    cv2.imshow('Okno Sergha', frame)\n",
       "    cv2.imshow('Okno mask Sergha', mask)\n",
       "    key = cv2.waitKey(1)\n",
       "    \n",
       "    if key == 27:\n",
       "        break\n",
       "\n",
       "cv2.destroyAllWindows()\n",
       "cap.release()"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": 52,
      "id": "514dd22e",
      "metadata": {
       "scrolled": true
      },
      "outputs": [
       {
        "data": {
         "text/plain": [
          "1"
         ]
        },
        "execution_count": 52,
        "metadata": {},
        "output_type": "execute_result"
       }
      ],
      "source": [
       "3%2\n",
       "\n"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "id": "9b2e9277",
      "metadata": {},
      "outputs": [],
      "source": []
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "id": "9de0dff6",
      "metadata": {},
      "outputs": [],
      "source": []
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "id": "c04627e9",
      "metadata": {},
      "outputs": [],
      "source": []
     }
   ], 
    "metadata": {
     "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.2"
     }
    },
    "nbformat": 4,
    "nbformat_minor": 5
   }
   